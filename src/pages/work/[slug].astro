---
import type { SanityDocument } from '@sanity/client';
import { sanityClient } from 'sanity:client';
import Layout from '../../layouts/Layout.astro';
import Tag from '../../components/Tag.astro';
import ScrollReveal from '../../components/ScrollReveal.astro';
import ContactForm from '../../components/ContactForm.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import ResponsiveHero from '../../components/ResponsiveHero.astro';
import MediaRenderer from '../../components/MediaRenderer.astro';
import type { FeaturedProject } from '../../types/sanity';
import { allProjectsQuery } from '../../lib/queries/portfolio';

export async function getStaticPaths() {
  // Fetch all projects with full details in one query

  const allProjects = await sanityClient.fetch<SanityDocument[]>(allProjectsQuery);

  return allProjects.map((project) => ({
    params: { slug: project.slug.current },
    props: {
      project,
      allProjects,
    },
  }));
}

const { project, allProjects } = Astro.props;

if (!project) {
  throw new Error('Project not found.');
}

// Get current project's tag IDs
const currentProjectTagIds = project.tags?.map((tag: any) => tag.id.current) || [];

// Filter projects that share at least one tag with current project
const projectsWithMatchingTags = allProjects.filter((p: any) => {
  if (p._id === project._id) return false; // Exclude current project
  const projectTagIds = p.tags?.map((tag: any) => tag.id.current) || [];
  return projectTagIds.some((tagId: string) => currentProjectTagIds.includes(tagId));
});

// Select 2 random projects from matching projects - changes on every page load
const shuffled = projectsWithMatchingTags.sort(() => 0.5 - Math.random());
const suggestedProjects: FeaturedProject[] = shuffled.slice(0, 2).map((p: any) => ({
  _key: p._id,
  mediaType: p.hero.mediaType,
  image: p.hero.image,
  video: p.hero.video,
  title: p.title,
  slug: p.slug.current,
}));

const heroLabelledTags =
  project.tags?.map((tag: any) => ({
    id: tag.id.current,
    label: tag.text,
    hoverColor: tag.hoverColor,
  })) || [];

const teamLines = Array.isArray(project.team) ? project.team : [];
---

<Layout title={`Symbold | ${project.title}`}>
  <section class="content-padding mt-10 md:mt-24">
    <div class="mt-12 grid gap-10 md:grid-cols-[minmax(0,2fr)_minmax(0,1fr)] md:items-start">
      <div class="flex flex-col gap-8">
        <h1 class="page-title">{project.title}</h1>
        <p class="max-w-2xl text-base leading-relaxed md:text-xl">{project.description}</p>
        <div class="flex flex-wrap gap-3">
          {
            heroLabelledTags.map((tag) => (
              <Tag id={tag.id} label={tag.label} interactive={false} hoverColor={tag.hoverColor} />
            ))
          }
        </div>
      </div>
      <div class="md:mt-[5.5rem]">
        <h2 class="text-sm tracking-[0.2em] text-neutral-500 uppercase">Team</h2>
        <div class="mt-4 space-y-1 text-sm leading-relaxed md:text-base">
          {teamLines.map((line) => <p>{line}</p>)}
        </div>
      </div>
    </div>
  </section>

  <section class="edge-padding mt-16 md:mt-24">
    <MediaRenderer media={project.hero} videoTitle={project.title} />
  </section>

  <section class="edge-padding">
    {
      project.content?.map((row: any) => {
        // portfolioRowFull - Full width responsive media
        if (row._type === 'portfolioRowFull') {
          return (
            <article class="mt-4">
              <ScrollReveal>
                <ResponsiveHero
                  desktopMedia={{
                    mediaType: row.desktopMedia.mediaType,
                    image: row.desktopMedia.image,
                    video: row.desktopMedia.video,
                  }}
                  mobileMedia={{
                    mediaType: row.mobileMedia.mediaType,
                    image: row.mobileMedia.image,
                    video: row.mobileMedia.video,
                  }}
                  videoTitle={project.title}
                />
              </ScrollReveal>
            </article>
          );
        }

        // portfolioRowWithDescription - Media with description
        if (row._type === 'portfolioRowWithDescription') {
          const description = row.description?.trim();
          const isDescriptionLeft = row.descriptionPosition === 'left';

          const mediaOrderClasses = isDescriptionLeft ? 'order-2 md:order-2' : 'order-1 md:order-1';
          const descriptionOrderClasses = isDescriptionLeft
            ? 'order-1 md:order-1 md:pr-12'
            : 'order-2 md:order-2 md:pl-12';

          return (
            <article class="mt-4 flex flex-col gap-8 md:flex-row md:items-center md:gap-16">
              <div class={`w-full md:w-1/2 ${mediaOrderClasses}`}>
                <ScrollReveal>
                  <MediaRenderer media={row.media} videoTitle={project.title} />
                </ScrollReveal>
              </div>
              {description && (
                <div
                  class={`w-full text-base leading-relaxed md:w-1/2 md:text-lg ${descriptionOrderClasses}`}
                >
                  <ScrollReveal>
                    <p>{description}</p>
                  </ScrollReveal>
                </div>
              )}
            </article>
          );
        }

        // portfolioRowSplit - Two media items side by side
        if (row._type === 'portfolioRowSplit') {
          return (
            <article class="mt-4 flex flex-col gap-4 md:flex-row md:gap-4">
              <div class="w-full md:w-1/2">
                <ScrollReveal>
                  <MediaRenderer media={row.leftMedia} videoTitle={project.title} />
                </ScrollReveal>
              </div>
              <div class="w-full md:w-1/2">
                <ScrollReveal>
                  <MediaRenderer media={row.rightMedia} videoTitle={project.title} />
                </ScrollReveal>
              </div>
            </article>
          );
        }

        // portfolioRowText - Text only block
        if (row._type === 'portfolioRowText') {
          return (
            <article class="mt-4">
              <ScrollReveal>
                <div class="md:flex md:justify-center">
                  <p class="max-w-3xl text-base leading-relaxed md:text-lg">{row.text}</p>
                </div>
              </ScrollReveal>
            </article>
          );
        }

        return null;
      })
    }
  </section>

  {
    suggestedProjects.length ? (
      <section class="edge-padding mt-30 md:mt-40">
        <h2 class="text-2xl font-bold md:text-4xl">Suggested projects</h2>
        <div class="mt-10 grid gap-6 md:grid-cols-2 md:gap-10">
          {suggestedProjects.map((suggested) => (
            <ScrollReveal>
              <ProjectPreview project={suggested} disableCursor={true} />
            </ScrollReveal>
          ))}
        </div>
      </section>
    ) : null
  }

  <section class="edge-padding mt-30 md:mt-40">
    <div class="flex flex-col gap-12 md:flex-row md:items-start md:gap-20">
      <div class="w-full md:w-1/3">
        <h2 class="text-3xl font-bold md:text-5xl">Let's talk about you.</h2>
        <p class="mt-6 text-base leading-relaxed text-neutral-700 md:text-lg">
          Symbold collaborates with leaders who see design as leverage. Share your challenges and
          we'll shape a brand experience that moves your business forward.
        </p>
      </div>
      <ContactForm wrapperClass="md:w-[55.67%]" />
    </div>
  </section>

  <div class="edge-padding">
    <hr class="mt-30 mb-10 md:mb-30" />
  </div>
</Layout>
