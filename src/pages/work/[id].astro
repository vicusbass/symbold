---
import type { SanityDocument } from '@sanity/client';
import { sanityClient } from 'sanity:client';
import Layout from '../../layouts/Layout.astro';
import Tag from '../../components/Tag.astro';
import ScrollReveal from '../../components/ScrollReveal.astro';
import ContactForm from '../../components/ContactForm.astro';
import { Image } from 'astro:assets';
import { getProjectById, projects } from '../../context/projects';

export function getStaticPaths() {
  return projects.map((project) => ({
    params: { id: project.id.toString() },
    props: { project },
  }));
}

const { project } = Astro.props as { project: ReturnType<typeof getProjectById> };

if (!project) {
  throw new Error('Project not found.');
}

const TAGS_QUERY = `*[_type == "tag"]{ id, text, hoverColor, order } | order(order asc)`;
const tagsData = await sanityClient.fetch<SanityDocument[]>(TAGS_QUERY);
const sanityTags = tagsData.map((tag) => ({
  id: tag.id.current,
  label: tag.text,
  hoverColor: tag.hoverColor,
}));

const tagLookup = new Map(sanityTags.map((tag) => [tag.id, tag.label]));
const detailItems = project.details ?? [];
const suggestedProjects = projects.filter((item) => item.id !== project.id).slice(0, 3);
const heroLabelledTags = project.tags.map((tagId) => {
  const sanityTag = sanityTags.find((t) => t.id === tagId);
  return {
    id: tagId,
    label: tagLookup.get(tagId) ?? tagId,
    hoverColor: sanityTag?.hoverColor,
  };
});
const teamLines = project.team.split('\n').filter(Boolean);
---

<Layout title={`Symbold | ${project.title}`}>
  <section class="edge-padding mt-10 md:mt-24">
    <div class="mt-12 grid gap-10 md:grid-cols-[minmax(0,2fr)_minmax(0,1fr)] md:items-start">
      <div class="flex flex-col gap-8">
        <h1 class="page-title">{project.title}</h1>
        <p class="max-w-2xl text-base leading-relaxed md:text-xl">{project.description}</p>
        <div class="flex flex-wrap gap-3">
          {
            heroLabelledTags.map((tag) => (
              <Tag id={tag.id} label={tag.label} interactive={false} hoverColor={tag.hoverColor} />
            ))
          }
        </div>
      </div>
      <div class="md:mt-[5.5rem]">
        <h2 class="text-sm tracking-[0.2em] text-neutral-500 uppercase">Team</h2>
        <div class="mt-4 space-y-1 text-sm leading-relaxed md:text-base">
          {teamLines.map((line) => <p>{line}</p>)}
        </div>
      </div>
    </div>
  </section>

  <section class="edge-padding mt-16 md:mt-24">
    <Image src={project.hero} alt={project.alt} class="h-auto w-full" />
  </section>

  <section class="edge-padding">
    {
      detailItems.map((detail, index) => {
        const description = detail.description?.trim();
        const isHalf = detail.size === 'half';
        const ShowDescription = Boolean(description);
        if (!isHalf) {
          return (
            <article class="mt-4">
              <ScrollReveal>
                <Image src={detail.image} alt={detail.alt} class="h-auto w-full" />
              </ScrollReveal>
              {ShowDescription && (
                <div class="md:flex md:justify-center">
                  <p class="max-w-3xl text-base leading-relaxed md:text-lg">{description}</p>
                </div>
              )}
            </article>
          );
        }

        const imageOrderClasses = detail.isDescriptionFirst
          ? 'order-2 md:order-2'
          : 'order-1 md:order-1';
        const descriptionOrderClasses = detail.isDescriptionFirst
          ? 'order-1 md:order-1 md:pr-12'
          : 'order-2 md:order-2 md:pl-12';

        return (
          <article class="mt-4 flex flex-col gap-8 md:flex-row md:items-center md:gap-16">
            <div class={`w-full md:w-1/2 ${imageOrderClasses}`}>
              <ScrollReveal>
                <Image src={detail.image} alt={detail.alt} class="h-auto w-full" />
              </ScrollReveal>
            </div>
            {ShowDescription && (
              <div
                class={`w-full text-base leading-relaxed md:w-1/2 md:text-lg ${descriptionOrderClasses}`}
              >
                <ScrollReveal>
                  <p>{description}</p>
                </ScrollReveal>
              </div>
            )}
          </article>
        );
      })
    }
  </section>

  {
    suggestedProjects.length ? (
      <section class="edge-padding mt-30 md:mt-40">
        <h2 class="text-2xl font-bold md:text-4xl">Suggested projects</h2>
        <div class="mt-10 grid gap-6 md:grid-cols-3 md:gap-10">
          {suggestedProjects.map((suggested) => (
            <ScrollReveal>
              <a
                href={`/work/${suggested.id}`}
                class="group focus-visible:ring-accent block focus:outline-none focus-visible:ring-2"
              >
                <Image src={suggested.hero} alt={suggested.alt} class="h-auto w-full" />
                <div class="mt-4 flex flex-col gap-2">
                  <h3 class="group-hover:text-accent text-lg font-semibold tracking-wide uppercase">
                    {suggested.title}
                  </h3>
                  <div class="flex flex-wrap gap-2 text-sm tracking-wide text-neutral-500 uppercase">
                    {suggested.tags.map((tagId) => (
                      <span>{tagLookup.get(tagId) ?? tagId}</span>
                    ))}
                  </div>
                </div>
              </a>
            </ScrollReveal>
          ))}
        </div>
      </section>
    ) : null
  }

  <section class="edge-padding mt-30 md:mt-40">
    <div class="flex flex-col gap-12 md:flex-row md:items-start md:gap-20">
      <div class="w-full md:w-1/3">
        <h2 class="text-3xl font-bold md:text-5xl">Let's talk about you.</h2>
        <p class="mt-6 text-base leading-relaxed text-neutral-700 md:text-lg">
          Symbold collaborates with leaders who see design as leverage. Share your challenges and
          we'll shape a brand experience that moves your business forward.
        </p>
      </div>
      <ContactForm wrapperClass="md:w-[55.67%]" />
    </div>
  </section>

  <div class="edge-padding">
    <hr class="mt-30 mb-10 md:mb-30" />
  </div>
</Layout>
