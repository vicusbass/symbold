---
import { Image } from 'astro:assets';
import MuxVideo from './MuxVideo.astro';

interface Props {
  href: string;
  imageUrl?: string | null;
  videoPlaybackId?: string | null;
  alt: string;
  videoTitle: string;
  description?: string;
  textColor?: string;
  class?: string;
}

const {
  href,
  imageUrl,
  videoPlaybackId,
  alt,
  videoTitle,
  description,
  textColor = '#FFFFFF',
  class: className,
} = Astro.props;
---

<a
  href={href}
  class:list={[
    'project-preview-link group focus-visible:ring-accent relative block overflow-hidden rounded-md focus:outline-none focus-visible:ring-2',
    className,
  ]}
>
  {
    imageUrl ? (
      <Image src={imageUrl} alt={alt} class="h-auto w-full" inferSize />
    ) : videoPlaybackId ? (
      <MuxVideo playbackId={videoPlaybackId} videoTitle={videoTitle} />
    ) : null
  }
  {
    description && (
      <div class="absolute inset-0 flex items-start justify-start rounded-md p-2 transition-opacity duration-300 group-hover:opacity-100 md:bg-black/50 md:p-4 md:opacity-0">
        <p
          class="max-w-[50%] text-base font-bold"
          style={{
            color: textColor,
          }}
        >
          {description}
        </p>
      </div>
    )
  }
  <slot />
</a>

<style is:global>
  @media (min-width: 768px) {
    .project-preview-link {
      cursor: none !important;
    }
  }

  #custom-cursor {
    position: fixed;
    pointer-events: none;
    z-index: 9999;
    opacity: 0;
    transform: translate(-50%, -50%);
    width: 64px;
    height: 64px;
    display: none;
  }

  @media (min-width: 768px) {
    #custom-cursor {
      display: block;
    }
  }

  #custom-cursor.active {
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  #custom-cursor svg {
    width: 100%;
    height: 100%;
    color: #44ff00;
  }
</style>

<script>
  import eyeIconSvg from '../assets/ochi.svg?raw';

  function initializeCursor() {
    // Create or get the custom cursor element
    let customCursor = document.getElementById('custom-cursor');
    if (!customCursor) {
      customCursor = document.createElement('div');
      customCursor.id = 'custom-cursor';
      customCursor.innerHTML = eyeIconSvg;
      document.body.appendChild(customCursor);
    }

    // Mouse move handler for the entire document
    const handleMouseMove = (e: MouseEvent) => {
      if (customCursor) {
        customCursor.style.left = `${e.clientX}px`;
        customCursor.style.top = `${e.clientY}px`;
      }
    };

    document.addEventListener('mousemove', handleMouseMove);

    return customCursor;
  }

  function attachCursorListeners(customCursor: HTMLElement) {
    const links = document.querySelectorAll('.project-preview-link');

    links.forEach((link) => {
      // remove old attribute to allow reattachment (important for cloned nodes)
      if (link.hasAttribute('data-cursor-attached')) {
        link.removeAttribute('data-cursor-attached');
      }

      link.setAttribute('data-cursor-attached', 'true');

      link.addEventListener('mouseenter', () => {
        if (customCursor) {
          customCursor.classList.add('active');
        }
      });

      link.addEventListener('mouseleave', () => {
        if (customCursor) {
          customCursor.classList.remove('active');
        }
      });
    });
  }

  document.addEventListener('astro:page-load', () => {
    const customCursor = initializeCursor();
    attachCursorListeners(customCursor);

    // Listen for dynamic project renders (e.g., from work page filtering)
    document.addEventListener('projects-rendered', () => {
      attachCursorListeners(customCursor);
    });
  });
</script>
