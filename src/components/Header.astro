---
import Logo from '../assets/logo.svg';
import MenuIcon from '../assets/menu.svg';
import MenuCloseIcon from '../assets/menu-close.svg';

const menuItems = [
  { name: 'Home', href: '/' },
  { name: 'Work', href: '/work' },
  { name: 'About', href: '/about' },
  { name: 'Contact', href: '/contact' },
];
---

<header class="content-padding flex h-[76px] items-center justify-between">
  <div class="logo">
    <a href="/">
      <Logo class="h-auto w-auto" />
    </a>
  </div>
  <!-- Desktop Navigation -->
  <nav class="hidden items-center gap-6 md:flex">
    {
      menuItems.map((item) => (
        <a href={item.href} class="text-base font-medium uppercase">
          {item.name}
        </a>
      ))
    }
  </nav>

  <!-- Mobile Hamburger -->
  <button
    id="menu-toggle"
    class="relative z-50 flex h-8 w-8 items-center justify-center md:hidden"
    aria-label="Toggle menu"
    aria-expanded="false"
  >
    <MenuIcon class="menu-icon h-8 w-8 transition-all duration-300" />
    <MenuCloseIcon class="close-icon absolute h-8 w-8 transition-all duration-300" />
  </button>
</header>

<style>
  .menu-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  .close-icon {
    opacity: 0;
    transform: rotate(-90deg);
  }

  [aria-expanded='true'] .menu-icon {
    opacity: 0;
    transform: rotate(90deg);
  }

  [aria-expanded='true'] .close-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  #mobile-menu {
    z-index: 40;
    transform: scale(0.1);
    opacity: 0.9;
    /* dynamic transform-origin set via JS each open */
    transform-origin: top right;
    transition:
      opacity 0.4s ease-out,
      transform 0.4s ease-out;
    will-change: opacity, transform;
  }

  #mobile-menu.active {
    display: flex;
    opacity: 1;
    transform: scale(1);
  }
</style>

<!-- Mobile Menu -->
<nav
  id="mobile-menu"
  class="fixed inset-0 z-50 flex hidden flex-col items-center justify-center gap-6 bg-white"
>
  {
    menuItems.map((item) => (
      <a href={item.href} class="text-2xl font-medium uppercase">
        {item.name}
      </a>
    ))
  }
</nav>

<script>
  document.addEventListener('astro:page-load', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    if (!menuToggle || !mobileMenu) return;

    const openMenu = () => {
      if (mobileMenu) {
        // reveal first so transition can play
        mobileMenu.classList.remove('hidden');
        // force reflow to ensure transition starts
        void mobileMenu.offsetWidth;
        mobileMenu.classList.add('active');
      }
    };

    const closeMenu = () => {
      if (mobileMenu) {
        mobileMenu.classList.remove('active');
        // after transition hide completely
        // @ts-ignore - runtime JS only, event typing not required
        const handleTransitionEnd = (e) => {
          if (e.target === mobileMenu && e.propertyName === 'opacity') {
            mobileMenu.classList.add('hidden');
            mobileMenu.removeEventListener('transitionend', handleTransitionEnd);
          }
        };
        mobileMenu.addEventListener('transitionend', handleTransitionEnd);
      }
    };

    menuToggle.addEventListener('click', () => {
      const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
      const nextExpanded = (!isExpanded).toString();
      menuToggle.setAttribute('aria-expanded', nextExpanded);

      if (nextExpanded === 'true') {
        openMenu();
      } else {
        closeMenu();
      }
    });
  });
</script>
